{"version":3,"sources":["../../src/models/excel.js"],"names":["xlsx","require","fs","moment","xlsxModel","exportXlsx","rows","headers","Promise","resolve","reject","fromBlankAsync","then","Sheet","workbook","sheet","numRow","i","length","row","cell","value","startCell","endCell","range","process","env","NODE_ENV","formatXlsx","formatXlsx2","saveXlsx","status","fileUrl","catch","msg","detail_msg","err","message","maxHeaders","maxRows","Range","style","column","width","arrWidth","reportPath","join","get","access","F_OK","mkdirSync","readdir","files","filter","extname","file","forEach","unlink","console","log","now","format","fileName","toFileAsync"],"mappings":"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","file":"excel.js","sourcesContent":["const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nconst moment = require('moment');\r\nimport path from 'path';\r\nimport app from '../index';\r\n\r\nexport default class xlsxModel {\r\n    exportXlsx = (rows, headers = []) => {\r\n        return new Promise((resolve, reject) => {\r\n            xlsx.fromBlankAsync()\r\n                .then(workbook => {\r\n                    const Sheet = workbook.sheet(0);\r\n                    let numRow = 1;\r\n\r\n                    if (headers !== []) {\r\n                        for (let i = 0; i < headers.length; i++) {\r\n                            Sheet.row(numRow).cell(i + 1).value(headers[i]);\r\n                        }\r\n                    }\r\n\r\n                    numRow++;\r\n                    const startCell = Sheet.row(numRow).cell(1);\r\n                    const endCell = Sheet.row(numRow + rows.length - 1).cell(headers.length);\r\n                    const range = Sheet.range(startCell, endCell);\r\n                    range.value(rows);\r\n\r\n                    if (process.env.NODE_ENV === 'home') {\r\n                        this.formatXlsx(workbook, headers.length, rows.length)\r\n                    } else {\r\n                        this.formatXlsx2(workbook, headers.length, rows.length)\r\n                    }\r\n\r\n                    this.saveXlsx(workbook)\r\n                        .then(fileUrl => resolve({status: 200, fileUrl: fileUrl}))\r\n                })\r\n                .catch(err =>\r\n                    reject({status: 500, msg: \"Error export to Excel\", detail_msg: err.message})\r\n                )\r\n        })\r\n    };\r\n\r\n    formatXlsx = (workbook, maxHeaders, maxRows) => {\r\n        const Sheet = workbook.sheet(0);\r\n        let Range = Sheet.range(1, 1, 1, maxHeaders);\r\n        Range.style(\"fontColor\", \"ffffff\").style(\"fill\", \"4F81BD\").style(\"bold\", true);\r\n\r\n        for (let i = 2; i <= maxRows + 1; i++) {\r\n            Range = Sheet.range(i, 1, i, maxHeaders);\r\n            if (i % 2) {\r\n                Range\r\n                    .style(\"fill\", \"FFFFFF\")\r\n                    .style(\"fontColor\", \"000000\")\r\n                    .style(\"bottomBorder\", true)\r\n                    .style(\"borderColor\", \"95B3D7\");\r\n            } else {\r\n                Range\r\n                    .style(\"fill\", \"DCE6F1\")\r\n                    .style(\"fontColor\", \"000000\")\r\n                    .style(\"bottomBorder\", true)\r\n                    .style(\"borderColor\", \"95B3D7\");\r\n            }\r\n        }\r\n\r\n        Range = Sheet.range(2, 1, maxRows + 1, 1);\r\n        Range.style(\"numberFormat\", \"dd.mm.yyyy\");\r\n        Range = Sheet.range(2, 2, maxRows + 1, 2);\r\n        Range.style(\"numberFormat\", \"dd.mm.yyyy\");\r\n\r\n        for (let i = 1; i <= maxHeaders; i++) {\r\n            Sheet.column(i).width(12);\r\n        }\r\n    };\r\n\r\n    formatXlsx2 = (workbook, maxHeaders, maxRows) => {\r\n        const Sheet = workbook.sheet(0);\r\n        let Range = Sheet.range(1, 1, 1, maxHeaders);\r\n        Range.style(\"fontColor\", \"ffffff\").style(\"fill\", \"4F81BD\").style(\"bold\", true);\r\n\r\n        for (let i = 2; i <= maxRows + 1; i++) {\r\n            Range = Sheet.range(i, 1, i, maxHeaders);\r\n            if (i % 2) {\r\n                Range\r\n                    .style(\"fill\", \"FFFFFF\")\r\n                    .style(\"fontColor\", \"000000\")\r\n                    .style(\"bottomBorder\", true)\r\n                    .style(\"borderColor\", \"95B3D7\");\r\n            } else {\r\n                Range\r\n                    .style(\"fill\", \"DCE6F1\")\r\n                    .style(\"fontColor\", \"000000\")\r\n                    .style(\"bottomBorder\", true)\r\n                    .style(\"borderColor\", \"95B3D7\");\r\n            }\r\n        }\r\n\r\n        Range = Sheet.range(2, 1, maxRows + 1, 1);\r\n        Range.style(\"numberFormat\", \"dd.mm.yyyy\");\r\n        Range = Sheet.range(2, 3, maxRows + 1, 3);\r\n        Range.style(\"numberFormat\", \"dd.mm.yyyy\");\r\n        Range = Sheet.range(2, 4, maxRows + 1, 4);\r\n        Range.style(\"numberFormat\", \"0.00\");\r\n        Range = Sheet.range(2, 5, maxRows + 1, 5);\r\n        Range.style(\"numberFormat\", \"0.00\");\r\n\r\n        for (let i = 1; i <= maxHeaders - 1; i++) {\r\n            Range = Sheet.range(2, i, maxRows + 1, i);\r\n            Range.style(\"horizontalAlignment\", \"center\");\r\n        }\r\n\r\n        const arrWidth = [11, 11, 16, 17, 17, 17, 60];\r\n        for (let i = 1; i <= maxHeaders; i++) {\r\n            Sheet.column(i).width(arrWidth[i - 1]);\r\n        }\r\n    };\r\n\r\n    saveXlsx = (workbook) => {\r\n        return new Promise((resolve, reject) => {\r\n            const reportPath = path.join(app.get('docsPath'), 'report');\r\n\r\n            fs.access(reportPath, fs.F_OK, (err) => {\r\n                if (err) {\r\n                    fs.mkdirSync(reportPath)\r\n                } else {\r\n                    fs.readdir(reportPath, (err, files) => {\r\n                        if (!err) {\r\n                            files.filter(file => path.extname(file) === '.xlsx')\r\n                                .forEach(file => {\r\n                                    fs.unlink(path.join(reportPath, file), (err) => {\r\n                                        if (err) console.log(err.message)\r\n                                    })\r\n                                });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                const now = moment().format(\"DDMMYYYY-HHmmss\");\r\n                let fileName = path.join(reportPath, 'report' + now + '.xlsx');\r\n                const fileUrl = 'report/report' + now + '.xlsx';\r\n                workbook.toFileAsync(fileName)\r\n                    .then(\r\n                        resolve(fileUrl)\r\n                    )\r\n                    .catch(err => {\r\n                        reject({status: 500, msg: \"Error export to Excel\", detail_msg: err.message});\r\n                    })\r\n\r\n            });\r\n\r\n        })\r\n    }\r\n}"]}