{"version":3,"sources":["../../src/models/user.js"],"names":["mongoose","require","Schema","bcrypt","userSchema","email","type","String","unique","lowercase","password","pre","next","user","genSalt","err","salt","hash","methods","comparePassword","candidatePassword","callback","compare","isMatch","ModelClass","model","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASF,SAASE,MAAxB;AACA,IAAMC,SAASF,QAAQ,eAAR,CAAf;;AAEA;AACA,IAAMG,aAAa,IAAIF,MAAJ,CAAW;AAC1BG,WAAO,EAACC,MAAMC,MAAP,EAAeC,QAAQ,IAAvB,EAA6BC,WAAW,IAAxC,EADmB;AAE1BC,cAAUH;AAFgB,CAAX,CAAnB;;AAKA;AACA;AACAH,WAAWO,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC;AACA,QAAMC,OAAO,IAAb;;AAEA;AACAV,WAAOW,OAAP,CAAe,EAAf,EAAmB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACpC,YAAID,GAAJ,EAAS;AACL,mBAAOH,KAAKG,GAAL,CAAP;AACH;;AAED;AACAZ,eAAOc,IAAP,CAAYJ,KAAKH,QAAjB,EAA2BM,IAA3B,EAAiC,IAAjC,EAAuC,UAAUD,GAAV,EAAeE,IAAf,EAAqB;AACxD,gBAAIF,GAAJ,EAAS;AACL,uBAAOH,KAAKG,GAAL,CAAP;AACH;;AAED;AACAF,iBAAKH,QAAL,GAAgBO,IAAhB;AACAL;AACH,SARD;AASH,KAfD;AAgBH,CArBD;;AAuBAR,WAAWc,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,iBAAV,EAA6BC,QAA7B,EAAuC;AACxElB,WAAOmB,OAAP,CAAeF,iBAAf,EAAkC,KAAKV,QAAvC,EAAiD,UAAUK,GAAV,EAAeQ,OAAf,EAAwB;AACrE,YAAIR,GAAJ,EAAS;AACL,mBAAOM,SAASN,GAAT,CAAP;AACH;;AAEDM,iBAAS,IAAT,EAAeE,OAAf;AACH,KAND;AAOH,CARD;;AAUA;AACA,IAAMC,aAAaxB,SAASyB,KAAT,CAAe,MAAf,EAAuBrB,UAAvB,CAAnB;;AAEA;AACAsB,OAAOC,OAAP,GAAiBH,UAAjB","file":"user.js","sourcesContent":["const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst bcrypt = require('bcrypt-nodejs');\n\n// Define our model\nconst userSchema = new Schema({\n    email: {type: String, unique: true, lowercase: true},\n    password: String\n});\n\n// On Save Hook, encrypt password\n// Before saving a model, run this function\nuserSchema.pre('save', function (next) {\n    // get access to the user model\n    const user = this;\n\n    // generate a salt then run callback\n    bcrypt.genSalt(10, function (err, salt) {\n        if (err) {\n            return next(err);\n        }\n\n        // hash (encrypt) our password using the salt\n        bcrypt.hash(user.password, salt, null, function (err, hash) {\n            if (err) {\n                return next(err);\n            }\n\n            // overwrite plain text password with encrypted password\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nuserSchema.methods.comparePassword = function (candidatePassword, callback) {\n    bcrypt.compare(candidatePassword, this.password, function (err, isMatch) {\n        if (err) {\n            return callback(err);\n        }\n\n        callback(null, isMatch);\n    });\n};\n\n// Create the model class\nconst ModelClass = mongoose.model('user', userSchema);\n\n// Export the model\nmodule.exports = ModelClass;\n"]}