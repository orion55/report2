{"version":3,"sources":["../../src/models/answersModel.js"],"names":["dbOrcl","answersModel","getReport","arrDate","Promise","resolve","reject","sql","process","env","NODE_ENV","doConnect","then","doExecuteArr","connection","arrRows","metaData","result","map","el","name","processResultSet","resultSet","getRow","row","doCloseResultSet","rows","push","catch","doClose","status","msg","detail_msg","err","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,kBAAb;;IAEqBC,Y;;;SACjBC,S,GAAY,UAACC,OAAD,EAAa;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIC,MAAM,EAAV;;AAEA,gBAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACjCH;AAcH,aAfD,MAeO;AACHA,sBAAM,uCACF,4BADE,GAEF,iCAFE,GAGF,kCAHE,GAIF,kCAJE,GAKF,sBALE,GAMF,kBANE,GAOF,gEAPE,GAQF,wBARE,GASF,gCATE,GAUF,+BAVE,GAWF,yBAXE,GAYF,mDAZE,GAaF,iDAbE,GAcF,kDAdE,GAeF,+BAfJ;AAgBH;AACDP,mBAAOW,SAAP,GACKC,IADL,CACU,sBAAc;AAChB,uBAAOZ,OAAOa,YAAP,CAAoBC,UAApB,EAAgCP,GAAhC,EAAqCJ,OAArC,EACFS,IADE,CACG,kBAAU;AACZ,wBAAIG,UAAU,EAAd;AACA,wBAAMC,WAAWC,OAAOD,QAAP,CAAgBE,GAAhB,CAAoB;AAAA,+BAAM,qBAAUC,GAAGC,IAAb,CAAN;AAAA,qBAApB,CAAjB;;AAEA,6BAASC,gBAAT,GAA4B;AACxBJ,+BAAOK,SAAP,CAAiBC,MAAjB,GACKX,IADL,CACU,eAAO;AACT,gCAAI,CAACY,GAAL,EAAU;AACNxB,uCAAOyB,gBAAP,CAAwBR,OAAOK,SAA/B;AACA,uCAAOjB,QAAQ,EAACqB,MAAMX,OAAP,EAAgBC,UAAUA,QAA1B,EAAR,CAAP;AACH;AACDD,oCAAQY,IAAR,CAAaH,GAAb;AACAH;AACH,yBARL;AASH;;AAEDA;AACH,iBAlBE,EAmBFO,KAnBE,CAmBI,eAAO;AACV5B,2BAAO6B,OAAP,CAAef,UAAf;AACAR,2BAAO,EAACwB,QAAQ,GAAT,EAAcC,KAAK,oBAAnB,EAAyCC,YAAYC,IAAIC,OAAzD,EAAP;AACH,iBAtBE,CAAP;AAuBH,aAzBL,EA0BKN,KA1BL,CA0BW,eAAO;AACVtB,uBAAO,EAACwB,QAAQ,GAAT,EAAcC,KAAK,wBAAnB,EAA6CC,YAAYC,IAAIC,OAA7D,EAAP;AACH,aA5BL;AA6BH,SAjEM,CAAP;AAkEH,K;;;kBApEgBjC,Y","file":"answersModel.js","sourcesContent":["import Db from './db';\r\nimport {jsUcfirst} from '../util';\r\n\r\nlet dbOrcl = new Db();\r\n\r\nexport default class answersModel {\r\n    getReport = (arrDate) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = '';\r\n\r\n            if (process.env.NODE_ENV === 'home') {\r\n                sql = `select t.operdate,\r\n                               t.closedate,\r\n                               t.closeday,\r\n                               t.closetime,\r\n                               t.usercodeopen,\r\n                               t.usercodeclose,\r\n                               t.unloadseqdel,\r\n                               t.unloadseqback,\r\n                               t.btrv_address,\r\n                               t.rowver\r\n                          from operdays t\r\n                         where t.operdate >= to_date(:dateFrom, 'mm.dd.yyyy')\r\n                           and t.operdate <= to_date(:dateTo, 'mm.dd.yyyy')\r\n                         order by t.operdate asc`;\r\n            } else {\r\n                sql = 'select t.docdate AS \"Дата ED274\", ' +\r\n                    't.opernum AS \"Код ED273\", ' +\r\n                    'p.docdate AS \"Дата документа\", ' +\r\n                    'p.docnum  AS \"Номер документа\", ' +\r\n                    'p.paysum  AS \"Сумма документа\", ' +\r\n                    'i.ed244_answercode, ' +\r\n                    'i.ed244_purpose ' +\r\n                    'FROM ESIDMESSAGE t, esid273doc a, payorder p, inesidmessage i ' +\r\n                    \"where t.doctype = 273 \" +\r\n                    \"and t.opernum = a.esidopernum \" +\r\n                    \"AND p.opernum = a.payopernum \" +\r\n                    \"AND i.edtype = 'ED274' \" +\r\n                    \"and i.eddate >= to_date(:dateFrom, 'mm.dd.yyyy') \" +\r\n                    \"and i.eddate <= to_date(:dateTo, 'mm.dd.yyyy') \" +\r\n                    \"AND MOD(i.ed243_edno / 1000, 1) * 1000 = a.edno \" +\r\n                    \"AND i.ed243_eddate = a.eddate\";\r\n            }\r\n            dbOrcl.doConnect()\r\n                .then(connection => {\r\n                    return dbOrcl.doExecuteArr(connection, sql, arrDate)\r\n                        .then(result => {\r\n                            let arrRows = [];\r\n                            const metaData = result.metaData.map(el => jsUcfirst(el.name));\r\n\r\n                            function processResultSet() {\r\n                                result.resultSet.getRow()\r\n                                    .then(row => {\r\n                                        if (!row) {\r\n                                            dbOrcl.doCloseResultSet(result.resultSet);\r\n                                            return resolve({rows: arrRows, metaData: metaData});\r\n                                        }\r\n                                        arrRows.push(row);\r\n                                        processResultSet();\r\n                                    })\r\n                            }\r\n\r\n                            processResultSet();\r\n                        })\r\n                        .catch(err => {\r\n                            dbOrcl.doClose(connection);\r\n                            reject({status: 500, msg: \"Error getting data\", detail_msg: err.message});\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    reject({status: 500, msg: \"Error connecting to DB\", detail_msg: err.message});\r\n                });\r\n        })\r\n    };\r\n}"]}