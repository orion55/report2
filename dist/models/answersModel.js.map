{"version":3,"sources":["../../src/models/answersModel.js"],"names":["dbOrcl","numRows","answersModel","getReport2","Promise","resolve","reject","sql","doConnect","then","doExecuteArr","connection","arrRows","processResultSet","resultSet","getRow","row","doClose","push","catch","status","message","detailed_message","err"],"mappings":";;;;;;AAAA;;;;;;;;AAEA,IAAIA,SAAS,kBAAb;AACA,IAAMC,UAAU,GAAhB;;IAEqBC,Y;;;SACjBC,U,GAAa,YAAM;AACf,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIC,MAAM,0CAAV;AACAP,mBAAOQ,SAAP,GACKC,IADL,CACU,sBAAc;AAChBT,uBAAOU,YAAP,CAAoBC,UAApB,EAAgCJ,GAAhC;AACA;;;;AADA,iBAKKE,IALL,CAKU,qBAAa;AACf,wBAAIG,UAAU,EAAd;;AAEA,6BAASC,gBAAT,GAA4B;AACxBC,kCAAUC,MAAV,GACKN,IADL,CACU,eAAO;AACL,gCAAI,CAACO,GAAL,EAAU;AACNhB,uCAAOiB,OAAP,CAAeN,UAAf;AACAN,wCAAQO,OAAR;AACH;AACDA,oCAAQM,IAAR,CAAaF,GAAb;AACAH;AAEH,yBATT,EAWKM,KAXL,CAWW,eAAO;AACVnB,mCAAOiB,OAAP,CAAeN,UAAf;AACAL,mCAAO;AACHc,wCAAQ,GADL;AAEHC,yCAAS,mBAFN;AAGHC,kDAAkBC,IAAIF;AAHnB,6BAAP;AAKH,yBAlBL;AAmBH;AAEJ,iBA9BL,EA+BKF,KA/BL,CA+BW,eAAO;AACVnB,2BAAOiB,OAAP,CAAeN,UAAf;AACAL,2BAAO,EAACc,QAAQ,GAAT,EAAcC,SAAS,oBAAvB,EAA6CC,kBAAkBC,IAAIF,OAAnE,EAAP;AACH,iBAlCL;AAmCH,aArCL,EAsCKF,KAtCL,CAsCW,eAAO;AACVb,uBAAO,EAACc,QAAQ,GAAT,EAAcC,SAAS,wBAAvB,EAAiDC,kBAAkBC,IAAIF,OAAvE,EAAP;AACH,aAxCL;AAyCH,SA3CM,CAAP;AA4CH,K;;;kBA9CgBnB,Y","file":"answersModel.js","sourcesContent":["import Db from './db';\r\n\r\nlet dbOrcl = new Db();\r\nconst numRows = 100;\r\n\r\nexport default class answersModel {\r\n    getReport2 = () => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = 'select * from X$USERS t order by xu$name';\r\n            dbOrcl.doConnect()\r\n                .then(connection => {\r\n                    dbOrcl.doExecuteArr(connection, sql)\r\n                    /*.then(result => {\r\n                     dbOrcl.doClose(connection);\r\n                     resolve(result);\r\n                     })*/\r\n                        .then(resultSet => {\r\n                            let arrRows = [];\r\n\r\n                            function processResultSet() {\r\n                                resultSet.getRow()\r\n                                    .then(row => {\r\n                                            if (!row) {\r\n                                                dbOrcl.doClose(connection);\r\n                                                resolve(arrRows);\r\n                                            }\r\n                                            arrRows.push(row);\r\n                                            processResultSet();\r\n\r\n                                        }\r\n                                    )\r\n                                    .catch(err => {\r\n                                        dbOrcl.doClose(connection);\r\n                                        reject({\r\n                                            status: 500,\r\n                                            message: \"Error getting row\",\r\n                                            detailed_message: err.message\r\n                                        });\r\n                                    });\r\n                            }\r\n\r\n                        })\r\n                        .catch(err => {\r\n                            dbOrcl.doClose(connection);\r\n                            reject({status: 500, message: \"Error getting data\", detailed_message: err.message});\r\n                        });\r\n                })\r\n                .catch(err => {\r\n                    reject({status: 500, message: \"Error connecting to DB\", detailed_message: err.message});\r\n                });\r\n        })\r\n    }\r\n}"]}