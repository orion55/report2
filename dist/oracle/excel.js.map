{"version":3,"sources":["../../src/oracle/excel.js"],"names":["ALPHA","writeToExcel","objects","selectedFields","spreadsheetName","self","rowsOfData","lineNum","worksheetColumns","_","forEach","push","wch","workbook","SheetNames","Sheets","i","length","currentCell","_calculateCurrentCellReference","t","v","displayName","s","font","bold","offer","fieldMap","_transformFieldsAndMapToColumnNames","displayValue","sz","alignment","wrapText","vertical","fill","fgColor","rgb","border","left","style","color","auto","right","top","bottom","lastColumnInSheet","endOfRange","fileName","workbookOutput","xlsx","write","bookSST","type","s2ab","buffer","ArrayBuffer","view","Uint8Array","charCodeAt","saveAs","$window","Blob","excelFinished","excelProjects","exceloffset","e","console","log","message","index","lineNumber","Math","floor","_longFormCalculateCurrentCellReference","currentCellReference","alphaVal","firstLetterVal","secondLetterVal"],"mappings":"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","file":"excel.js","sourcesContent":["const ALPHA = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\r\n    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n\r\nlet writeToExcel = (objects, selectedFields, spreadsheetName) => {\r\n\r\n    let self = this;\r\n\r\n    try {\r\n        let rowsOfData = objects;\r\n        let lineNum = 1;\r\n        let worksheetColumns = [];\r\n\r\n        _.forEach(selectedFields, function () {\r\n            worksheetColumns.push({wch: 25});\r\n        });\r\n\r\n        let workbook = {\r\n            SheetNames: [spreadsheetName],\r\n            Sheets: {\r\n                [spreadsheetName]: {\r\n                    '!ref': 'A1:',\r\n                    '!cols': worksheetColumns\r\n                }\r\n            }\r\n        };\r\n\r\n        for (let i = 0; i < selectedFields.length; i++) {\r\n            worksheetColumns.push({wch: 25});\r\n            let currentCell = self._calculateCurrentCellReference(i, lineNum);\r\n            workbook.Sheets[spreadsheetName][currentCell] = {\r\n                t: \"s\",\r\n                v: selectedFields[i].displayName,\r\n                s: {font: {bold: true}}\r\n            };\r\n        }\r\n\r\n        lineNum++;\r\n\r\n        rowsOfData.forEach(function (offer) {\r\n            let fieldMap = self._transformFieldsAndMapToColumnNames(offer);\r\n            for (let i = 0; i < selectedFields.length; i++) {\r\n                let displayValue = fieldMap[selectedFields[i].displayName];\r\n                let currentCell = self._calculateCurrentCellReference(i, lineNum);\r\n                workbook.Sheets[spreadsheetName][currentCell] = {\r\n                    t: \"s\",\r\n                    v: displayValue,\r\n                    s: {\r\n                        font: {sz: \"11\", bold: false},\r\n                        alignment: {wrapText: true, vertical: 'top'},\r\n                        fill: {fgColor: {rgb: 'ffffff'}},\r\n                        border: {\r\n                            left: {style: 'thin', color: {auto: 1}},\r\n                            right: {style: 'thin', color: {auto: 1}},\r\n                            top: {style: 'thin', color: {auto: 1}},\r\n                            bottom: {style: 'thin', color: {auto: 1}}\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            lineNum++;\r\n        });\r\n\r\n        let lastColumnInSheet = selectedFields.length - 1;\r\n        let endOfRange = self._calculateCurrentCellReference(lastColumnInSheet, lineNum);\r\n        workbook.Sheets[spreadsheetName]['!ref'] += endOfRange;\r\n        let fileName = spreadsheetName + '.xlsx';\r\n        let workbookOutput = xlsx.write(workbook, {bookSST: true, type: 'binary'});\r\n\r\n        let s2ab = function (s) {\r\n            let buffer = new ArrayBuffer(s.length);\r\n            let view = new Uint8Array(buffer);\r\n            for (let i = 0; i !== s.length; ++i) {\r\n                view[i] = s.charCodeAt(i) & 0xFF;\r\n            }\r\n            return buffer;\r\n        };\r\n\r\n        saveAs(new this.$window.Blob([s2ab(workbookOutput)], {type: \"application/octet-stream\"}), fileName);\r\n        self.excelFinished = false;\r\n        self.excelProjects = [];\r\n        self.exceloffset = 0;\r\n    }\r\n    catch (e) {\r\n        console.log('Error in Excel Save: ' + e.message);\r\n    }\r\n};\r\n\r\nlet _calculateCurrentCellReference = (index, lineNumber) =>\r\n    (index > 25) ? ALPHA[Math.floor((index / 26) - 1)] + ALPHA[index % 26] + lineNumber : ALPHA[index] + lineNumber;\r\n\r\n\r\nlet _longFormCalculateCurrentCellReference = (index, lineNumber) => {\r\n    let currentCellReference = '';\r\n    let alphaVal = '';\r\n    if (index > 25) {\r\n        let firstLetterVal = Math.floor((index / 26) - 1);\r\n        let secondLetterVal = index % 26;\r\n        alphaVal = ALPHA[firstLetterVal] + ALPHA[secondLetterVal];\r\n        currentCellReference = alphaVal + lineNumber;\r\n    } else {\r\n        alphaVal = ALPHA[index];\r\n        currentCellReference = alphaVal + lineNumber;\r\n    }\r\n    return currentCellReference;\r\n};\r\n\r\n"]}