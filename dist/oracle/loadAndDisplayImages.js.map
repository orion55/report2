{"version":3,"sources":["../../src/oracle/loadAndDisplayImages.js"],"names":["loadAndDisplayImages","imgList","notLoaded","loaded","promiseImgs","map","loadImage","reduce","previousPromise","currentPromise","then","url","$","append","push","Promise","resolve","catch","console","log","lastUrl","res","loadRes","err"],"mappings":";;AAAA,SAASA,oBAAT,CAA8BC,OAA9B,EAAuC;AACnC,QAAIC,YAAY,EAAhB,CADmC,CAChB;AACnB,QAAIC,SAAS,EAAb,CAFmC,CAEnB;AAChB,QAAIC,cAAcH,QAAQI,GAAR,CAAYC,SAAZ,CAAlB;;AAEA;AACA;AACA,WAAOF,YAAYG,MAAZ,CAAmB,UAAUC,eAAV,EAA2BC,cAA3B,EAA2C;AACjE,eAAOD,gBACFE,IADE,CACG,YAAY;AACd;AACA,mBAAOD,cAAP;AACH,SAJE,EAKFC,IALE,CAKG,UAAUC,GAAV,EAAe;AACrB;AACIC,cAAE,SAAF,EAAaC,MAAb,CAAoB,eAAeF,GAAf,GAAqB,2BAAzC;AACAR,mBAAOW,IAAP,CAAYH,GAAZ;AACA,mBAAOI,QAAQC,OAAR,CAAgBL,GAAhB,CAAP;AACH,SAVE,EAWFM,KAXE,CAWI,UAAUN,GAAV,EAAc;AACrB;AACIO,oBAAQC,GAAR,CAAY,uDAAZ,EAAqER,GAArE;AACAT,sBAAUY,IAAV,CAAeH,GAAf;AACA,mBAAOI,QAAQC,OAAR,CAAgBL,GAAhB,CAAP;AACH,SAhBE,CAAP;AAkBH,KAnBM,EAmBJI,QAAQC,OAAR,EAnBI,EAoBFN,IApBE,CAoBG,UAAUU,OAAV,EAAmB;AACrBF,gBAAQC,GAAR,CAAY,UAAZ,EAAwBC,OAAxB;;AAEA,YAAIC,MAAM,EAAClB,QAAQA,MAAT,EAAiBD,WAAWA,SAA5B,EAAV;;AAEA;AACA,eAAOa,QAAQC,OAAR,CAAgBK,GAAhB,CAAP;AACH,KA3BE,CAAP;AA6BH;;AAEDrB,qBAAqBC,OAArB,EACKS,IADL,CACU,UAAUY,OAAV,EAAmB;AACrBJ,YAAQC,GAAR,CAAYG,OAAZ;AACH,CAHL,EAIKL,KAJL,CAIW,UAAUM,GAAV,EAAe;AAClBL,YAAQC,GAAR,CAAYI,GAAZ;AACH,CANL","file":"loadAndDisplayImages.js","sourcesContent":["function loadAndDisplayImages(imgList) {\r\n    var notLoaded = [];//сохраним url, какие не были загружены\r\n    var loaded = [];//сохраним url, какие были загружены\r\n    var promiseImgs = imgList.map(loadImage);\r\n\r\n    //вернем результат работы вызова reduce(...) - объект Promise, чтобы можно было потом  при необходимости продолжить цепочку вызовов:\r\n    //loadAndDisplayImages(...).then(...).catch(...);\r\n    return promiseImgs.reduce(function (previousPromise, currentPromise) {\r\n        return previousPromise\r\n            .then(function () {\r\n                //выполняется этот участок кода, так как previousPromise - в состоянии resolved (= Promise.resolve())\r\n                return currentPromise;\r\n            })\r\n            .then(function (url) //для \"обещаний\" в состоянии resolved\r\n            {\r\n                $('#images').append('<img src=\"' + url + '\" style=\"width: 200px;\"/>');\r\n                loaded.push(url);\r\n                return Promise.resolve(url);\r\n            })\r\n            .catch(function (url)//для \"обещаний\" в состоянии rejected\r\n            {\r\n                console.log('не удалось загрузить изображение по указанному пути: ', url);\r\n                notLoaded.push(url);\r\n                return Promise.resolve(url);\r\n            });\r\n\r\n    }, Promise.resolve())\r\n        .then(function (lastUrl) {\r\n            console.log('lastUrl:', lastUrl);\r\n\r\n            let res = {loaded: loaded, notLoaded: notLoaded};\r\n\r\n            //но мы вернем Promise, значение которого будет объект\r\n            return Promise.resolve(res);\r\n        });\r\n\r\n}\r\n\r\nloadAndDisplayImages(imgList)\r\n    .then(function (loadRes) {\r\n        console.log(loadRes);\r\n    })\r\n    .catch(function (err) {\r\n        console.log(err);\r\n    });\r\n"]}