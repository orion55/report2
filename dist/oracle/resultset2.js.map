{"version":3,"sources":["../../src/oracle/resultset2.js"],"names":["oracledb","require","dbConfig","numRows","getConnection","user","password","connectString","err","connection","console","error","message","sql","execute","resultSet","prefetchRows","result","doRelease","fetchRowsFromRS","getRows","rows","doClose","length","log","close"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,WAAWD,QAAQ,eAAR,CAAf;AACA,IAAIE,UAAU,EAAd,C,CAAmB;;AAEnBH,SAASI,aAAT,CACI;AACIC,UAAMH,SAASG,IADnB;AAEIC,cAAUJ,SAASI,QAFvB;AAGIC,mBAAeL,SAASK;AAH5B,CADJ,EAMI,UAAUC,GAAV,EAAeC,UAAf,EAA2B;AACvB,QAAID,GAAJ,EAAS;AACLE,gBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACA;AACH;;AAED,QAAIC,MAAM,uCACN,4BADM,GAEN,iCAFM,GAGN,kCAHM,GAIN,kCAJM,GAKN,sBALM,GAMN,kBANM,GAON,gEAPM,GAQN,wBARM,GASN,gCATM,GAUN,+BAVM,GAWN,yBAXM,GAYN,sDAZM,GAaN,sDAbM,GAcN,kDAdM,GAeN,+BAfJ;;AAiBAJ,eAAWK,OAAX,CACID,GADJ,EAEI,EAFJ,EAEQ;AACJ;AACIE,mBAAW,IADf,EACqB;AACjBC,sBAAc,EAFlB,CAEqB;AAFrB,KAHJ,EAOI,UAAUR,GAAV,EAAeS,MAAf,EAAuB;AACnB,YAAIT,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACAM,sBAAUT,UAAV;AACA;AACH;AACD;AACAU,wBAAgBV,UAAhB,EAA4BQ,OAAOF,SAAnC,EAA8CZ,OAA9C;AACH,KAfL;AAgBH,CA7CL;;AA+CA,SAASgB,eAAT,CAAyBV,UAAzB,EAAqCM,SAArC,EAAgDZ,OAAhD,EAAyD;AACrDY,cAAUK,OAAV,CACIjB,OADJ,EACc;AACV,cAAUK,GAAV,EAAea,IAAf,EAAqB;AACjB,YAAIb,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,GAAd;AACAc,oBAAQb,UAAR,EAAoBM,SAApB,EAFK,CAE2B;AACnC,SAHD,MAGO,IAAIM,KAAKE,MAAL,GAAc,CAAlB,EAAqB;AACxBb,oBAAQc,GAAR,CAAY,4BAA4BH,KAAKE,MAAjC,GAA0C,OAAtD;AACA;AACA,gBAAIF,KAAKE,MAAL,KAAgBpB,OAApB,EAA6B;AACzBgB,gCAAgBV,UAAhB,EAA4BM,SAA5B,EAAuCZ,OAAvC,EADJ,KAGImB,QAAQb,UAAR,EAAoBM,SAApB,EANoB,CAMY;AACvC,SAPM,MAOA;AAAE;AACLO,oBAAQb,UAAR,EAAoBM,SAApB,EADG,CAC6B;AACnC;AACJ,KAhBL;AAiBH;;AAED,SAASG,SAAT,CAAmBT,UAAnB,EAA+B;AAC3BA,eAAWgB,KAAX,CACI,UAAUjB,GAAV,EAAe;AACX,YAAIA,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACH;AACJ,KALL;AAMH;;AAED,SAASU,OAAT,CAAiBb,UAAjB,EAA6BM,SAA7B,EAAwC;AACpCA,cAAUU,KAAV,CACI,UAAUjB,GAAV,EAAe;AACX,YAAIA,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACH;AACDM,kBAAUT,UAAV;AACH,KANL;AAOH","file":"resultset2.js","sourcesContent":["var oracledb = require('oracledb');\r\nvar dbConfig = require('./dbconfig.js');\r\nvar numRows = 10;  // number of rows to return from each call to getRows()\r\n\r\noracledb.getConnection(\r\n    {\r\n        user: dbConfig.user,\r\n        password: dbConfig.password,\r\n        connectString: dbConfig.connectString\r\n    },\r\n    function (err, connection) {\r\n        if (err) {\r\n            console.error(err.message);\r\n            return;\r\n        }\r\n\r\n        var sql = 'select t.docdate AS \"Дата ED274\", ' +\r\n            't.opernum AS \"Код ED273\", ' +\r\n            'p.docdate AS \"Дата документа\", ' +\r\n            'p.docnum  AS \"Номер документа\", ' +\r\n            'p.paysum  AS \"Сумма документа\", ' +\r\n            'i.ed244_answercode, ' +\r\n            'i.ed244_purpose ' +\r\n            'FROM ESIDMESSAGE t, esid273doc a, payorder p, inesidmessage i ' +\r\n            \"where t.doctype = 273 \" +\r\n            \"and t.opernum = a.esidopernum \" +\r\n            \"AND p.opernum = a.payopernum \" +\r\n            \"AND i.edtype = 'ED274' \" +\r\n            \"and i.eddate >= to_date('04.01.2017', 'mm.dd.yyyy') \" +\r\n            \"and i.eddate <= to_date('04.30.2017', 'mm.dd.yyyy') \" +\r\n            \"AND MOD(i.ed243_edno / 1000, 1) * 1000 = a.edno \" +\r\n            \"AND i.ed243_eddate = a.eddate\";\r\n\r\n        connection.execute(\r\n            sql,\r\n            [], // no bind variables\r\n            {\r\n                resultSet: true, // return a result set.  Default is false\r\n                prefetchRows: 10 // the prefetch size can be set for each query\r\n            },\r\n            function (err, result) {\r\n                if (err) {\r\n                    console.error(err.message);\r\n                    doRelease(connection);\r\n                    return;\r\n                }\r\n                // console.log(result);\r\n                fetchRowsFromRS(connection, result.resultSet, numRows);\r\n            });\r\n    });\r\n\r\nfunction fetchRowsFromRS(connection, resultSet, numRows) {\r\n    resultSet.getRows(\r\n        numRows,  // get this many rows\r\n        function (err, rows) {\r\n            if (err) {\r\n                console.error(err);\r\n                doClose(connection, resultSet); // always close the result set\r\n            } else if (rows.length > 0) {\r\n                console.log(\"fetchRowsFromRS(): Got \" + rows.length + \" rows\");\r\n                // console.log(rows);\r\n                if (rows.length === numRows) // might be more rows\r\n                    fetchRowsFromRS(connection, resultSet, numRows);\r\n                else\r\n                    doClose(connection, resultSet); // always close the result set\r\n            } else { // no rows\r\n                doClose(connection, resultSet); // always close the result set\r\n            }\r\n        });\r\n}\r\n\r\nfunction doRelease(connection) {\r\n    connection.close(\r\n        function (err) {\r\n            if (err) {\r\n                console.error(err.message);\r\n            }\r\n        });\r\n}\r\n\r\nfunction doClose(connection, resultSet) {\r\n    resultSet.close(\r\n        function (err) {\r\n            if (err) {\r\n                console.error(err.message);\r\n            }\r\n            doRelease(connection);\r\n        });\r\n}\r\n"]}