{"version":3,"sources":["../../src/oracle/resultset2.js"],"names":["oracledb","require","dbConfig","numRows","getConnection","user","password","connectString","err","connection","console","error","message","execute","resultSet","prefetchRows","result","doRelease","fetchRowsFromRS","getRows","rows","doClose","length","log","close"],"mappings":";;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,WAAWD,QAAQ,eAAR,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIE,UAAU,EAAd,C,CAAmB;;AAEnBH,SAASI,aAAT,CACI;AACIC,UAAMH,SAASG,IADnB;AAEIC,cAAUJ,SAASI,QAFvB;AAGIC,mBAAeL,SAASK;AAH5B,CADJ,EAMI,UAAUC,GAAV,EAAeC,UAAf,EAA2B;AACvB,QAAID,GAAJ,EAAS;AACLE,gBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACA;AACH;AACDH,eAAWI,OAAX,CACI,0CADJ,EAEI,EAFJ,EAEQ;AACJ;AACIC,mBAAW,IADf,EACqB;AACjBC,sBAAc,EAFlB,CAEqB;AAFrB,KAHJ,EAOI,UAAUP,GAAV,EAAeQ,MAAf,EAAuB;AACnB,YAAIR,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACAK,sBAAUR,UAAV;AACA;AACH;AACD;AACAS,wBAAgBT,UAAhB,EAA4BO,OAAOF,SAAnC,EAA8CX,OAA9C;AACH,KAfL;AAgBH,CA3BL;;AA6BA,SAASe,eAAT,CAAyBT,UAAzB,EAAqCK,SAArC,EAAgDX,OAAhD,EAAyD;AACrDW,cAAUK,OAAV,CACIhB,OADJ,EACc;AACV,cAAUK,GAAV,EAAeY,IAAf,EAAqB;AACjB,YAAIZ,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,GAAd;AACAa,oBAAQZ,UAAR,EAAoBK,SAApB,EAFK,CAE2B;AACnC,SAHD,MAGO,IAAIM,KAAKE,MAAL,GAAc,CAAlB,EAAqB;AACxBZ,oBAAQa,GAAR,CAAY,4BAA4BH,KAAKE,MAAjC,GAA0C,OAAtD;AACAZ,oBAAQa,GAAR,CAAYH,IAAZ;AACA,gBAAIA,KAAKE,MAAL,KAAgBnB,OAApB,EAA6B;AACzBe,gCAAgBT,UAAhB,EAA4BK,SAA5B,EAAuCX,OAAvC,EADJ,KAGIkB,QAAQZ,UAAR,EAAoBK,SAApB,EANoB,CAMY;AACvC,SAPM,MAOA;AAAE;AACLO,oBAAQZ,UAAR,EAAoBK,SAApB,EADG,CAC6B;AACnC;AACJ,KAhBL;AAiBH;;AAED,SAASG,SAAT,CAAmBR,UAAnB,EAA+B;AAC3BA,eAAWe,KAAX,CACI,UAAUhB,GAAV,EAAe;AACX,YAAIA,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACH;AACJ,KALL;AAMH;;AAED,SAASS,OAAT,CAAiBZ,UAAjB,EAA6BK,SAA7B,EAAwC;AACpCA,cAAUU,KAAV,CACI,UAAUhB,GAAV,EAAe;AACX,YAAIA,GAAJ,EAAS;AACLE,oBAAQC,KAAR,CAAcH,IAAII,OAAlB;AACH;AACDK,kBAAUR,UAAV;AACH,KANL;AAOH","file":"resultset2.js","sourcesContent":["/* Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved. */\n\n/******************************************************************************\n *\n * You may not use the identified files except in compliance with the Apache\n * License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NAME\n *   resultset2.js\n *\n * DESCRIPTION\n *   Executes a query and uses a result set to fetch batches of rows\n *   with getRows().  Also shows setting the prefetch size.\n *   Uses Oracle's sample HR schema.\n *\n *****************************************************************************/\n\nvar oracledb = require('oracledb');\nvar dbConfig = require('./dbconfig.js');\n\n// Prefetching is a tuning feature for optimizing row transfer from\n// the Oracle Database to node-oracledb with Result Sets.  The default\n// prefetch size is 100.  The prefetch size does not affect how, or\n// when, rows are returned by node-oracledb to the application.\n// Buffering is handled by the underlying Oracle client libraries.\n// Benchmark to choose the optimal size for each application or query.\n//\n//oracledb.prefetchRows = 100;\n\nvar numRows = 10;  // number of rows to return from each call to getRows()\n\noracledb.getConnection(\n    {\n        user: dbConfig.user,\n        password: dbConfig.password,\n        connectString: dbConfig.connectString\n    },\n    function (err, connection) {\n        if (err) {\n            console.error(err.message);\n            return;\n        }\n        connection.execute(\n            \"select * from X$USERS t order by xu$name\",\n            [], // no bind variables\n            {\n                resultSet: true, // return a result set.  Default is false\n                prefetchRows: 25 // the prefetch size can be set for each query\n            },\n            function (err, result) {\n                if (err) {\n                    console.error(err.message);\n                    doRelease(connection);\n                    return;\n                }\n                // console.log(result);\n                fetchRowsFromRS(connection, result.resultSet, numRows);\n            });\n    });\n\nfunction fetchRowsFromRS(connection, resultSet, numRows) {\n    resultSet.getRows(\n        numRows,  // get this many rows\n        function (err, rows) {\n            if (err) {\n                console.error(err);\n                doClose(connection, resultSet); // always close the result set\n            } else if (rows.length > 0) {\n                console.log(\"fetchRowsFromRS(): Got \" + rows.length + \" rows\");\n                console.log(rows);\n                if (rows.length === numRows) // might be more rows\n                    fetchRowsFromRS(connection, resultSet, numRows);\n                else\n                    doClose(connection, resultSet); // always close the result set\n            } else { // no rows\n                doClose(connection, resultSet); // always close the result set\n            }\n        });\n}\n\nfunction doRelease(connection) {\n    connection.close(\n        function (err) {\n            if (err) {\n                console.error(err.message);\n            }\n        });\n}\n\nfunction doClose(connection, resultSet) {\n    resultSet.close(\n        function (err) {\n            if (err) {\n                console.error(err.message);\n            }\n            doRelease(connection);\n        });\n}\n"]}