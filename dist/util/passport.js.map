{"version":3,"sources":["../../src/util/passport.js"],"names":["passport","require","User","config","JwtStrategy","Strategy","ExtractJwt","LocalStrategy","localOptions","usernameField","localLogin","email","password","done","findOne","err","user","comparePassword","isMatch","jwtOptions","jwtFromRequest","fromHeader","secretOrKey","secret","jwtLogin","payload","findById","sub","use"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,gBAAR,CAAb;AACA,IAAME,SAASF,QAAQ,uBAAR,CAAf;AACA,IAAMG,cAAcH,QAAQ,cAAR,EAAwBI,QAA5C;AACA,IAAMC,aAAaL,QAAQ,cAAR,EAAwBK,UAA3C;AACA,IAAMC,gBAAgBN,QAAQ,gBAAR,CAAtB;;AAEA;AACA,IAAMO,eAAe,EAACC,eAAe,OAAhB,EAArB;AACA,IAAMC,aAAa,IAAIH,aAAJ,CAAkBC,YAAlB,EAAgC,UAAUG,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAChF;AACA;AACA;AACAX,SAAKY,OAAL,CAAa,EAACH,OAAOA,KAAR,EAAb,EAA6B,UAAUI,GAAV,EAAeC,IAAf,EAAqB;AAC9C,YAAID,GAAJ,EAAS;AACL,mBAAOF,KAAKE,GAAL,CAAP;AACH;AACD,YAAI,CAACC,IAAL,EAAW;AACP,mBAAOH,KAAK,IAAL,EAAW,KAAX,CAAP;AACH;;AAED;AACAG,aAAKC,eAAL,CAAqBL,QAArB,EAA+B,UAAUG,GAAV,EAAeG,OAAf,EAAwB;AACnD,gBAAIH,GAAJ,EAAS;AACL,uBAAOF,KAAKE,GAAL,CAAP;AACH;AACD,gBAAI,CAACG,OAAL,EAAc;AACV,uBAAOL,KAAK,IAAL,EAAW,KAAX,CAAP;AACH;;AAED,mBAAOA,KAAK,IAAL,EAAWG,IAAX,CAAP;AACH,SATD;AAUH,KAnBD;AAoBH,CAxBkB,CAAnB;;AA0BA;AACA,IAAMG,aAAa;AACfC,oBAAgBd,WAAWe,UAAX,CAAsB,eAAtB,CADD;AAEfC,iBAAanB,OAAOoB;AAFL,CAAnB;;AAKA;AACA,IAAMC,WAAW,IAAIpB,WAAJ,CAAgBe,UAAhB,EAA4B,UAAUM,OAAV,EAAmBZ,IAAnB,EAAyB;AAClE;AACA;AACA;AACAX,SAAKwB,QAAL,CAAcD,QAAQE,GAAtB,EAA2B,UAAUZ,GAAV,EAAeC,IAAf,EAAqB;AAC5C,YAAID,GAAJ,EAAS;AACL,mBAAOF,KAAKE,GAAL,EAAU,KAAV,CAAP;AACH;;AAED,YAAIC,IAAJ,EAAU;AACNH,iBAAK,IAAL,EAAWG,IAAX;AACH,SAFD,MAEO;AACHH,iBAAK,IAAL,EAAW,KAAX;AACH;AACJ,KAVD;AAWH,CAfgB,CAAjB;;AAiBA;AACAb,SAAS4B,GAAT,CAAaJ,QAAb;AACAxB,SAAS4B,GAAT,CAAalB,UAAb","file":"passport.js","sourcesContent":["const passport = require('passport');\r\nconst User = require('../models/user');\r\nconst config = require('../config/config.json');\r\nconst JwtStrategy = require('passport-jwt').Strategy;\r\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\r\nconst LocalStrategy = require('passport-local');\r\n\r\n// Create local strategy\r\nconst localOptions = {usernameField: 'email'};\r\nconst localLogin = new LocalStrategy(localOptions, function (email, password, done) {\r\n    // Verify this email and password, call done with the user\r\n    // if it is the correct email and password\r\n    // otherwise, call done with false\r\n    User.findOne({email: email}, function (err, user) {\r\n        if (err) {\r\n            return done(err);\r\n        }\r\n        if (!user) {\r\n            return done(null, false);\r\n        }\r\n\r\n        // compare passwords - is `password` equal to user.password?\r\n        user.comparePassword(password, function (err, isMatch) {\r\n            if (err) {\r\n                return done(err);\r\n            }\r\n            if (!isMatch) {\r\n                return done(null, false);\r\n            }\r\n\r\n            return done(null, user);\r\n        });\r\n    });\r\n});\r\n\r\n// Setup options for JWT Strategy\r\nconst jwtOptions = {\r\n    jwtFromRequest: ExtractJwt.fromHeader('authorization'),\r\n    secretOrKey: config.secret\r\n};\r\n\r\n// Create JWT strategy\r\nconst jwtLogin = new JwtStrategy(jwtOptions, function (payload, done) {\r\n    // See if the user ID in the payload exists in our database\r\n    // If it does, call 'done' with that other\r\n    // otherwise, call done without a user object\r\n    User.findById(payload.sub, function (err, user) {\r\n        if (err) {\r\n            return done(err, false);\r\n        }\r\n\r\n        if (user) {\r\n            done(null, user);\r\n        } else {\r\n            done(null, false);\r\n        }\r\n    });\r\n});\r\n\r\n// Tell passport to use this strategy\r\npassport.use(jwtLogin);\r\npassport.use(localLogin);\r\n"]}