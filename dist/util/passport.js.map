{"version":3,"sources":["../../src/util/passport.js"],"names":["passport","require","User","config","JwtStrategy","Strategy","ExtractJwt","LocalStrategy","localOptions","usernameField","localLogin","email","password","done","findOne","err","user","comparePassword","isMatch","jwtOptions","jwtFromRequest","fromHeader","secretOrKey","secret","jwtLogin","payload","findById","sub","use"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,gBAAR,CAAb;AACA,IAAME,SAASF,QAAQ,WAAR,CAAf;AACA,IAAMG,cAAcH,QAAQ,cAAR,EAAwBI,QAA5C;AACA,IAAMC,aAAaL,QAAQ,cAAR,EAAwBK,UAA3C;AACA,IAAMC,gBAAgBN,QAAQ,gBAAR,CAAtB;;AAEA;AACA,IAAMO,eAAe,EAAEC,eAAe,OAAjB,EAArB;AACA,IAAMC,aAAa,IAAIH,aAAJ,CAAkBC,YAAlB,EAAgC,UAASG,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgC;AACjF;AACA;AACA;AACAX,OAAKY,OAAL,CAAa,EAAEH,OAAOA,KAAT,EAAb,EAA+B,UAASI,GAAT,EAAcC,IAAd,EAAoB;AACjD,QAAID,GAAJ,EAAS;AAAE,aAAOF,KAAKE,GAAL,CAAP;AAAmB;AAC9B,QAAI,CAACC,IAAL,EAAW;AAAE,aAAOH,KAAK,IAAL,EAAW,KAAX,CAAP;AAA2B;;AAExC;AACAG,SAAKC,eAAL,CAAqBL,QAArB,EAA+B,UAASG,GAAT,EAAcG,OAAd,EAAuB;AACpD,UAAIH,GAAJ,EAAS;AAAE,eAAOF,KAAKE,GAAL,CAAP;AAAmB;AAC9B,UAAI,CAACG,OAAL,EAAc;AAAE,eAAOL,KAAK,IAAL,EAAW,KAAX,CAAP;AAA2B;;AAE3C,aAAOA,KAAK,IAAL,EAAWG,IAAX,CAAP;AACD,KALD;AAMD,GAXD;AAYD,CAhBkB,CAAnB;;AAkBA;AACA,IAAMG,aAAa;AACjBC,kBAAgBd,WAAWe,UAAX,CAAsB,eAAtB,CADC;AAEjBC,eAAanB,OAAOoB;AAFH,CAAnB;;AAKA;AACA,IAAMC,WAAW,IAAIpB,WAAJ,CAAgBe,UAAhB,EAA4B,UAASM,OAAT,EAAkBZ,IAAlB,EAAwB;AACnE;AACA;AACA;AACAX,OAAKwB,QAAL,CAAcD,QAAQE,GAAtB,EAA2B,UAASZ,GAAT,EAAcC,IAAd,EAAoB;AAC7C,QAAID,GAAJ,EAAS;AAAE,aAAOF,KAAKE,GAAL,EAAU,KAAV,CAAP;AAA0B;;AAErC,QAAIC,IAAJ,EAAU;AACRH,WAAK,IAAL,EAAWG,IAAX;AACD,KAFD,MAEO;AACLH,WAAK,IAAL,EAAW,KAAX;AACD;AACF,GARD;AASD,CAbgB,CAAjB;;AAeA;AACAb,SAAS4B,GAAT,CAAaJ,QAAb;AACAxB,SAAS4B,GAAT,CAAalB,UAAb","file":"passport.js","sourcesContent":["const passport = require('passport');\nconst User = require('../models/user');\nconst config = require('../config');\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst LocalStrategy = require('passport-local');\n\n// Create local strategy\nconst localOptions = { usernameField: 'email' };\nconst localLogin = new LocalStrategy(localOptions, function(email, password, done) {\n  // Verify this email and password, call done with the user\n  // if it is the correct email and password\n  // otherwise, call done with false\n  User.findOne({ email: email }, function(err, user) {\n    if (err) { return done(err); }\n    if (!user) { return done(null, false); }\n\n    // compare passwords - is `password` equal to user.password?\n    user.comparePassword(password, function(err, isMatch) {\n      if (err) { return done(err); }\n      if (!isMatch) { return done(null, false); }\n\n      return done(null, user);\n    });\n  });\n});\n\n// Setup options for JWT Strategy\nconst jwtOptions = {\n  jwtFromRequest: ExtractJwt.fromHeader('authorization'),\n  secretOrKey: config.secret\n};\n\n// Create JWT strategy\nconst jwtLogin = new JwtStrategy(jwtOptions, function(payload, done) {\n  // See if the user ID in the payload exists in our database\n  // If it does, call 'done' with that other\n  // otherwise, call done without a user object\n  User.findById(payload.sub, function(err, user) {\n    if (err) { return done(err, false); }\n\n    if (user) {\n      done(null, user);\n    } else {\n      done(null, false);\n    }\n  });\n});\n\n// Tell passport to use this strategy\npassport.use(jwtLogin);\npassport.use(localLogin);\n"]}