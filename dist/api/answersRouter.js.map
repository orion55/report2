{"version":3,"sources":["../../src/api/answersRouter.js"],"names":["passport","require","anwersRouter","answers","requireAuth","authenticate","session","get","req","res","checkQuery","notEmpty","isDate","getValidationResult","then","result","isEmpty","set","status","send","JSON","stringify","array","getReport2","dateFrom","query","from","dateTo","to","xlsx","exportXlsx","rows","metaData","requestedUrl","protocol","fileUrl","contentType","catch","err"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;;;AACA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEA,IAAIC,eAAe,sBAAnB;AACA,IAAIC,UAAU,4BAAd;AACA,IAAMC,cAAcJ,SAASK,YAAT,CAAsB,KAAtB,EAA6B,EAACC,SAAS,KAAV,EAA7B,CAApB;;AAEAJ,aAAaK,GAAb,CAAiB,GAAjB,EAAsBH,WAAtB,EAAmC,UAAUI,GAAV,EAAeC,GAAf,EAAoB;AACnDD,QAAIE,UAAJ,CAAe,MAAf,EAAuB,mBAAvB,EAA4CC,QAA5C,GAAuDC,MAAvD;AACAJ,QAAIE,UAAJ,CAAe,IAAf,EAAqB,iBAArB,EAAwCC,QAAxC,GAAmDC,MAAnD;;AAEAJ,QAAIK,mBAAJ,GACKC,IADL,CACU,kBAAU;AACZ,YAAI,CAACC,OAAOC,OAAP,EAAL,EAAuB;AACnBP,gBAAIQ,GAAJ,CAAQ,cAAR,EAAwB,kBAAxB;AACAR,gBAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAAKC,SAAL,CAAe,4BAAiBN,OAAOO,KAAP,EAAjB,EAAiC,OAAjC,CAAf,CAArB;AACA;AACH;AACDnB,gBAAQoB,UAAR,CAAmB,EAACC,UAAUhB,IAAIiB,KAAJ,CAAUC,IAArB,EAA2BC,QAAQnB,IAAIiB,KAAJ,CAAUG,EAA7C,EAAnB,EACKd,IADL,CACU,kBAAU;AACZ,gBAAIe,OAAO,qBAAX;AACA,mBAAOA,KAAKC,UAAL,CAAgBf,OAAOgB,IAAvB,EAA6BhB,OAAOiB,QAApC,CAAP;AACH,SAJL,EAKKlB,IALL,CAKU,kBAAU;AACZ,gBAAMmB,eAAezB,IAAI0B,QAAJ,GAAe,KAAf,GAAuB1B,IAAID,GAAJ,CAAQ,MAAR,CAA5C;AACAQ,mBAAOoB,OAAP,GAAiBF,eAAe,GAAf,GAAqBlB,OAAOoB,OAA7C;AACA1B,gBAAI2B,WAAJ,CAAgB,kBAAhB,EAAoClB,MAApC,CAA2C,GAA3C;AACAT,gBAAIU,IAAJ,CAASC,KAAKC,SAAL,CAAeN,MAAf,CAAT;AACH,SAVL,EAWKsB,KAXL,CAWW,eAAO;AACV5B,gBAAIQ,GAAJ,CAAQ,cAAR,EAAwB,kBAAxB;AACAR,gBAAIS,MAAJ,CAAWoB,IAAIpB,MAAf,EAAuBC,IAAvB,CAA4BC,KAAKC,SAAL,CAAeiB,GAAf,CAA5B;AACH,SAdL;AAgBH,KAvBL;AAwBH,CA5BD;;kBA8BepC,Y","file":"answersRouter.js","sourcesContent":["import {Router} from 'express';\r\nimport AnswersModel from '../models/answersModel';\r\nimport {removeDuplicates} from '../util';\r\nimport XlsxModel from '../models/excel';\r\nconst passport = require('passport');\r\n\r\nlet anwersRouter = Router();\r\nlet answers = new AnswersModel();\r\nconst requireAuth = passport.authenticate('jwt', {session: false});\r\n\r\nanwersRouter.get('/', requireAuth, function (req, res) {\r\n    req.checkQuery('from', 'Invalid From date').notEmpty().isDate();\r\n    req.checkQuery('to', 'Invalid To date').notEmpty().isDate();\r\n\r\n    req.getValidationResult()\r\n        .then(result => {\r\n            if (!result.isEmpty()) {\r\n                res.set('Content-Type', 'application/json');\r\n                res.status(500).send(JSON.stringify(removeDuplicates(result.array(), 'param')));\r\n                return;\r\n            }\r\n            answers.getReport2({dateFrom: req.query.from, dateTo: req.query.to})\r\n                .then(result => {\r\n                    let xlsx = new XlsxModel();\r\n                    return xlsx.exportXlsx(result.rows, result.metaData);\r\n                })\r\n                .then(result => {\r\n                    const requestedUrl = req.protocol + '://' + req.get('Host');\r\n                    result.fileUrl = requestedUrl + '/' + result.fileUrl;\r\n                    res.contentType('application/json').status(200);\r\n                    res.send(JSON.stringify(result));\r\n                })\r\n                .catch(err => {\r\n                    res.set('Content-Type', 'application/json');\r\n                    res.status(err.status).send(JSON.stringify(err));\r\n                });\r\n\r\n        });\r\n});\r\n\r\nexport default anwersRouter;\r\n\r\n"]}