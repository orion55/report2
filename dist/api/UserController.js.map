{"version":3,"sources":["../../src/api/UserController.js"],"names":["express","require","router","Router","bodyParser","User","getFullURL","passport","use","urlencoded","extended","requireAuth","authenticate","session","post","req","res","email","body","password","status","send","error","findOne","err","existingUser","next","user","save","newUser","Object","assign","_id","get","checkQuery","isAscii","isAlpha","isInt","getValidationResult","then","result","isEmpty","set","JSON","stringify","array","sort_field","query","_sort","sort_order","_order","sort_obj","options","select","sort","offset","_start","limit","_end","paginate","newDocs","docs","map","rObj","el","_doc","setHeader","total","catch","findById","params","id","delete","findByIdAndRemove","put","findByIdAndUpdate","new","module","exports"],"mappings":";;AAIA;;AAJA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,SAASF,QAAQG,MAAR,EAAb;AACA,IAAIC,aAAaH,QAAQ,aAAR,CAAjB;AACA,IAAMI,OAAOJ,QAAQ,gBAAR,CAAb;;AAEA,IAAMK,aAAaL,QAAQ,sBAAR,CAAnB;AACA,IAAMM,WAAWN,QAAQ,UAAR,CAAjB;;AAEAC,OAAOM,GAAP,CAAWJ,WAAWK,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAX;AACA,IAAMC,cAAcJ,SAASK,YAAT,CAAsB,KAAtB,EAA6B,EAACC,SAAS,KAAV,EAA7B,CAApB;;AAEA;AACAX,OAAOY,IAAP,CAAY,GAAZ,EAAiBH,WAAjB,EAA8B,UAAUI,GAAV,EAAeC,GAAf,EAAoB;AAC9C,QAAMC,QAAQF,IAAIG,IAAJ,CAASD,KAAvB;AACA,QAAME,WAAWJ,IAAIG,IAAJ,CAASC,QAA1B;;AAEA,QAAI,CAACF,KAAD,IAAU,CAACE,QAAf,EAAyB;AACrB,eAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,qCAAR,EAArB,CAAP;AACH;;AAED;AACAjB,SAAKkB,OAAL,CAAa,EAACN,OAAOA,KAAR,EAAb,EAA6B,UAAUO,GAAV,EAAeC,YAAf,EAA6B;AACtD,YAAID,GAAJ,EAAS;AACL,mBAAOE,KAAKF,GAAL,CAAP;AACH;;AAED;AACA,YAAIC,YAAJ,EAAkB;AACd,mBAAOT,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,iBAAR,EAArB,CAAP;AACH;;AAED;AACA,YAAMK,OAAO,IAAItB,IAAJ,CAAS;AAClBY,mBAAOA,KADW;AAElBE,sBAAUA;AAFQ,SAAT,CAAb;;AAKAQ,aAAKC,IAAL,CAAU,UAAUJ,GAAV,EAAe;AACrB,gBAAIA,GAAJ,EAAS;AACL,uBAAOE,KAAKF,GAAL,CAAP;AACH;;AAED,gBAAIK,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,CAAd;AACAE,oBAAQ,IAAR,IAAgBF,KAAKK,GAArB;AACAhB,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,OAArB;AACH,SARD;AASH,KAzBD;AA0BH,CAnCD;;AAqCA;AACA3B,OAAO+B,GAAP,CAAW,GAAX,EAAgBtB,WAAhB,EAA6B,UAAUI,GAAV,EAAeC,GAAf,EAAoB;AAC7CD,QAAImB,UAAJ,CAAe,OAAf,EAAwB,eAAxB,EAAyCC,OAAzC;AACApB,QAAImB,UAAJ,CAAe,QAAf,EAAyB,gBAAzB,EAA2CE,OAA3C;AACArB,QAAImB,UAAJ,CAAe,QAAf,EAAyB,gBAAzB,EAA2CG,KAA3C;AACAtB,QAAImB,UAAJ,CAAe,MAAf,EAAuB,cAAvB,EAAuCG,KAAvC;;AAEAtB,QAAIuB,mBAAJ,GACKC,IADL,CACU,kBAAU;AACZ,YAAI,CAACC,OAAOC,OAAP,EAAL,EAAuB;AACnBzB,gBAAI0B,GAAJ,CAAQ,cAAR,EAAwB,kBAAxB;AACA1B,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBsB,KAAKC,SAAL,CAAe,4BAAiBJ,OAAOK,KAAP,EAAjB,EAAiC,OAAjC,CAAf,CAArB;AACH;;AAED,YAAMC,aAAa/B,IAAIgC,KAAJ,CAAUC,KAAV,IAAmB,KAAtC;AACA,YAAMC,aAAalC,IAAIgC,KAAJ,CAAUG,MAAV,KAAqB,MAArB,GAA8B,CAAC,CAA/B,GAAmC,CAAtD;;AAEA,YAAIC,WAAW,EAAf;AACAA,iBAASL,UAAT,IAAuBG,UAAvB;;AAEA,YAAIG,UAAU;AACVC,oBAAQ,oBADE;AAEVC,kBAAMH,QAFI;AAGVI,oBAAQ,CAACxC,IAAIgC,KAAJ,CAAUS,MAHT;AAIVC,mBAAO1C,IAAIgC,KAAJ,CAAUW,IAAV,GAAiB3C,IAAIgC,KAAJ,CAAUS;AAJxB,SAAd;;AAOAnD,aAAKsD,QAAL,CAAc,EAAd,EAAkBP,OAAlB,EACKb,IADL,CACU,kBAAU;AACZ,gBAAIqB,UAAUpB,OAAOqB,IAAP,CAAYC,GAAZ,CAAgB,cAAM;AAChC,oBAAIC,OAAOjC,OAAOC,MAAP,CAAc,EAAd,EAAkBiC,GAAGC,IAArB,CAAX;AACAF,qBAAK,IAAL,IAAaC,GAAGhC,GAAhB;AACA,uBAAO+B,KAAK/B,GAAZ;AACA,uBAAO+B,IAAP;AACH,aALa,CAAd;AAMA/C,gBAAIkD,SAAJ,CAAc,eAAd,EAA+B1B,OAAO2B,KAAtC;AACAnD,gBAAIkD,SAAJ,CAAc,+BAAd,EAA+C,eAA/C;AACAlD,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBuC,OAArB;AACH,SAXL,EAYKQ,KAZL,CAYW,eAAO;AACVpD,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,GAArB;AACH,SAdL;AAeH,KAnCL;AAoCH,CA1CD;;AA4CA;AACAtB,OAAO+B,GAAP,CAAW,MAAX,EAAmBtB,WAAnB,EAAgC,UAAUI,GAAV,EAAeC,GAAf,EAAoB;AAChDX,SAAKgE,QAAL,CAActD,IAAIuD,MAAJ,CAAWC,EAAzB,EAA6B,UAAU/C,GAAV,EAAeG,IAAf,EAAqB;AAC9C,YAAIH,GAAJ,EAAS,OAAOR,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AACT,YAAI,CAACM,IAAL,EAAW,OAAOX,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAAP;AACXL,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,IAArB;AACH,KAJD;AAKH,CAND;;AAQA;AACAzB,OAAOsE,MAAP,CAAc,MAAd,EAAsB7D,WAAtB,EAAmC,UAAUI,GAAV,EAAeC,GAAf,EAAoB;AACnDX,SAAKoE,iBAAL,CAAuB1D,IAAIuD,MAAJ,CAAWC,EAAlC,EAAsC,UAAU/C,GAAV,EAAeG,IAAf,EAAqB;AACvD,YAAIH,GAAJ,EAAS,OAAOR,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;AACTL,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAAWM,KAAKV,KAAhB,GAAwB,eAA7C;AACH,KAHD;AAIH,CALD;;AAOA;AACAf,OAAOwE,GAAP,CAAW,MAAX,EAAmB/D,WAAnB,EAAgC,UAAUI,GAAV,EAAeC,GAAf,EAAoB;AAChDX,SAAKsE,iBAAL,CAAuB5D,IAAIuD,MAAJ,CAAWC,EAAlC,EAAsCxD,IAAIG,IAA1C,EAAgD,EAAC0D,KAAK,IAAN,EAAhD,EAA6D,UAAUpD,GAAV,EAAeG,IAAf,EAAqB;AAC9E,YAAIH,GAAJ,EAAS,OAAOR,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;AACTL,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,IAArB;AACH,KAHD;AAIH,CALD;;AAOAkD,OAAOC,OAAP,GAAiB5E,MAAjB","file":"UserController.js","sourcesContent":["let express = require('express');\r\nlet router = express.Router();\r\nlet bodyParser = require('body-parser');\r\nconst User = require('../models/user');\r\nimport {removeDuplicates} from '../util';\r\nconst getFullURL = require('../util/get-full-url');\r\nconst passport = require('passport');\r\n\r\nrouter.use(bodyParser.urlencoded({extended: true}));\r\nconst requireAuth = passport.authenticate('jwt', {session: false});\r\n\r\n// CREATES A NEW USER\r\nrouter.post('/', requireAuth, function (req, res) {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n    if (!email || !password) {\r\n        return res.status(422).send({error: 'You must provide email and password'});\r\n    }\r\n\r\n    // See if a user with the given email exists\r\n    User.findOne({email: email}, function (err, existingUser) {\r\n        if (err) {\r\n            return next(err);\r\n        }\r\n\r\n        // If a user with email does exist, return an error\r\n        if (existingUser) {\r\n            return res.status(422).send({error: 'Email is in use'});\r\n        }\r\n\r\n        // If a user with email does NOT exist, create and save user record\r\n        const user = new User({\r\n            email: email,\r\n            password: password\r\n        });\r\n\r\n        user.save(function (err) {\r\n            if (err) {\r\n                return next(err);\r\n            }\r\n\r\n            let newUser = Object.assign({}, user);\r\n            newUser[\"id\"] = user._id;\r\n            res.status(200).send(newUser);\r\n        });\r\n    });\r\n});\r\n\r\n// RETURNS ALL THE USERS IN THE DATABASE\r\nrouter.get('/', requireAuth, function (req, res) {\r\n    req.checkQuery('_sort', 'Invalid _sort').isAscii();\r\n    req.checkQuery('_order', 'Invalid _order').isAlpha();\r\n    req.checkQuery('_start', 'Invalid _start').isInt();\r\n    req.checkQuery('_end', 'Invalid _end').isInt();\r\n\r\n    req.getValidationResult()\r\n        .then(result => {\r\n            if (!result.isEmpty()) {\r\n                res.set('Content-Type', 'application/json');\r\n                res.status(500).send(JSON.stringify(removeDuplicates(result.array(), 'param')));\r\n            }\r\n\r\n            const sort_field = req.query._sort || \"_id\";\r\n            const sort_order = req.query._order === 'DESC' ? -1 : 1;\r\n\r\n            let sort_obj = {};\r\n            sort_obj[sort_field] = sort_order;\r\n\r\n            let options = {\r\n                select: '_id email password',\r\n                sort: sort_obj,\r\n                offset: +req.query._start,\r\n                limit: req.query._end - req.query._start\r\n            };\r\n\r\n            User.paginate({}, options)\r\n                .then(result => {\r\n                    let newDocs = result.docs.map(el => {\r\n                        let rObj = Object.assign({}, el._doc);\r\n                        rObj[\"id\"] = el._id;\r\n                        delete rObj._id;\r\n                        return rObj;\r\n                    });\r\n                    res.setHeader('X-Total-Count', result.total);\r\n                    res.setHeader('Access-Control-Expose-Headers', 'X-Total-Count');\r\n                    res.status(200).send(newDocs);\r\n                })\r\n                .catch(err => {\r\n                    res.status(500).send(err);\r\n                });\r\n        });\r\n});\r\n\r\n// GETS A SINGLE USER FROM THE DATABASE\r\nrouter.get('/:id', requireAuth, function (req, res) {\r\n    User.findById(req.params.id, function (err, user) {\r\n        if (err) return res.status(500).send(\"There was a problem finding the user.\");\r\n        if (!user) return res.status(404).send(\"No user found.\");\r\n        res.status(200).send(user);\r\n    });\r\n});\r\n\r\n// DELETES A USER FROM THE DATABASE\r\nrouter.delete('/:id', requireAuth, function (req, res) {\r\n    User.findByIdAndRemove(req.params.id, function (err, user) {\r\n        if (err) return res.status(500).send(\"There was a problem deleting the user.\");\r\n        res.status(200).send(\"User: \" + user.email + \" was deleted.\");\r\n    });\r\n});\r\n\r\n// UPDATES A SINGLE USER IN THE DATABASE\r\nrouter.put('/:id', requireAuth, function (req, res) {\r\n    User.findByIdAndUpdate(req.params.id, req.body, {new: true}, function (err, user) {\r\n        if (err) return res.status(500).send(\"There was a problem updating the user.\");\r\n        res.status(200).send(user);\r\n    });\r\n});\r\n\r\nmodule.exports = router;"]}