{"version":3,"sources":["../../src/api/UserController.js"],"names":["express","require","router","Router","bodyParser","User","use","urlencoded","extended","post","req","res","email","body","password","status","send","error","findOne","err","existingUser","next","user","save","get","find","users","findById","params","id","delete","findByIdAndRemove","name","put","findByIdAndUpdate","new","module","exports"],"mappings":"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","file":"UserController.js","sourcesContent":["let express = require('express');\nlet router = express.Router();\nlet bodyParser = require('body-parser');\nconst User = require('../models/user');\n\nrouter.use(bodyParser.urlencoded({extended: true}));\n\n// CREATES A NEW USER\nrouter.post('/', function (req, res) {\n    const email = req.body.email;\n    const password = req.body.password;\n\n    if (!email || !password) {\n        return res.status(422).send({error: 'You must provide email and password'});\n    }\n\n    // See if a user with the given email exists\n    User.findOne({email: email}, function (err, existingUser) {\n        if (err) {\n            return next(err);\n        }\n\n        // If a user with email does exist, return an error\n        if (existingUser) {\n            return res.status(422).send({error: 'Email is in use'});\n        }\n\n        // If a user with email does NOT exist, create and save user record\n        const user = new User({\n            email: email,\n            password: password\n        });\n\n        user.save(function (err) {\n            if (err) {\n                return next(err);\n            }\n\n            // Repond to request indicating the user was created\n            // res.json({token: tokenForUser(user)});\n            res.status(200).send(user);\n        });\n    });\n});\n\n// RETURNS ALL THE USERS IN THE DATABASE\nrouter.get('/', function (req, res) {\n    User.find({}, function (err, users) {\n        if (err) return res.status(500).send(\"There was a problem finding the users.\");\n        res.status(200).send(users);\n    });\n});\n\n// GETS A SINGLE USER FROM THE DATABASE\nrouter.get('/:id', function (req, res) {\n    User.findById(req.params.id, function (err, user) {\n        if (err) return res.status(500).send(\"There was a problem finding the user.\");\n        if (!user) return res.status(404).send(\"No user found.\");\n        res.status(200).send(user);\n    });\n});\n\n// DELETES A USER FROM THE DATABASE\nrouter.delete('/:id', function (req, res) {\n    User.findByIdAndRemove(req.params.id, function (err, user) {\n        if (err) return res.status(500).send(\"There was a problem deleting the user.\");\n        res.status(200).send(\"User: \" + user.name + \" was deleted.\");\n    });\n});\n\n// UPDATES A SINGLE USER IN THE DATABASE\nrouter.put('/:id', function (req, res) {\n    User.findByIdAndUpdate(req.params.id, req.body, {new: true}, function (err, user) {\n        if (err) return res.status(500).send(\"There was a problem updating the user.\");\n        res.status(200).send(user);\n    });\n});\n\nmodule.exports = router;"]}