{"version":3,"sources":["../../src/api/authentication.js"],"names":["jwt","require","User","config","tokenForUser","user","timestamp","Date","getTime","encode","sub","id","iat","secret","exports","signin","req","res","next","send","token","signup","email","body","password","status","error","findOne","err","existingUser","save","json"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,YAAR,CAAZ;AACA,IAAMC,OAAOD,QAAQ,gBAAR,CAAb;AACA,IAAME,SAASF,QAAQ,uBAAR,CAAf;;AAEA,SAASG,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,QAAMC,YAAY,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,WAAOR,IAAIS,MAAJ,CAAW,EAACC,KAAKL,KAAKM,EAAX,EAAeC,KAAKN,SAApB,EAAX,EAA2CH,OAAOU,MAAlD,CAAP;AACH;;AAEDC,QAAQC,MAAR,GAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACvC;AACA;AACAD,QAAIE,IAAJ,CAAS,EAACC,OAAOhB,aAAaY,IAAIX,IAAjB,CAAR,EAAT;AACH,CAJD;;AAMAS,QAAQO,MAAR,GAAiB,UAAUL,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACvC,QAAMI,QAAQN,IAAIO,IAAJ,CAASD,KAAvB;AACA,QAAME,WAAWR,IAAIO,IAAJ,CAASC,QAA1B;;AAEA,QAAI,CAACF,KAAD,IAAU,CAACE,QAAf,EAAyB;AACrB,eAAOP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAACO,OAAO,qCAAR,EAArB,CAAP;AACH;;AAED;AACAxB,SAAKyB,OAAL,CAAa,EAACL,OAAOA,KAAR,EAAb,EAA6B,UAAUM,GAAV,EAAeC,YAAf,EAA6B;AACtD,YAAID,GAAJ,EAAS;AACL,mBAAOV,KAAKU,GAAL,CAAP;AACH;;AAED;AACA,YAAIC,YAAJ,EAAkB;AACd,mBAAOZ,IAAIQ,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAACO,OAAO,iBAAR,EAArB,CAAP;AACH;;AAED;AACA,YAAMrB,OAAO,IAAIH,IAAJ,CAAS;AAClBoB,mBAAOA,KADW;AAElBE,sBAAUA;AAFQ,SAAT,CAAb;;AAKAnB,aAAKyB,IAAL,CAAU,UAAUF,GAAV,EAAe;AACrB,gBAAIA,GAAJ,EAAS;AACL,uBAAOV,KAAKU,GAAL,CAAP;AACH;;AAED;AACAX,gBAAIc,IAAJ,CAAS,EAACX,OAAOhB,aAAaC,IAAb,CAAR,EAAT;AACH,SAPD;AAQH,KAxBD;AAyBH,CAlCD","file":"authentication.js","sourcesContent":["const jwt = require('jwt-simple');\r\nconst User = require('../models/user');\r\nconst config = require('../config/config.json');\r\n\r\nfunction tokenForUser(user) {\r\n    const timestamp = new Date().getTime();\r\n    return jwt.encode({sub: user.id, iat: timestamp}, config.secret);\r\n}\r\n\r\nexports.signin = function (req, res, next) {\r\n    // User has already had their email and password auth'd\r\n    // We just need to give them a token\r\n    res.send({token: tokenForUser(req.user)});\r\n};\r\n\r\nexports.signup = function (req, res, next) {\r\n    const email = req.body.email;\r\n    const password = req.body.password;\r\n\r\n    if (!email || !password) {\r\n        return res.status(422).send({error: 'You must provide email and password'});\r\n    }\r\n\r\n    // See if a user with the given email exists\r\n    User.findOne({email: email}, function (err, existingUser) {\r\n        if (err) {\r\n            return next(err);\r\n        }\r\n\r\n        // If a user with email does exist, return an error\r\n        if (existingUser) {\r\n            return res.status(422).send({error: 'Email is in use'});\r\n        }\r\n\r\n        // If a user with email does NOT exist, create and save user record\r\n        const user = new User({\r\n            email: email,\r\n            password: password\r\n        });\r\n\r\n        user.save(function (err) {\r\n            if (err) {\r\n                return next(err);\r\n            }\r\n\r\n            // Repond to request indicating the user was created\r\n            res.json({token: tokenForUser(user)});\r\n        });\r\n    });\r\n};"]}